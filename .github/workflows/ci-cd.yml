name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  AZURE_CONTAINER_REGISTRY: ecommercemicroservicesacr
  CLUSTER_NAME: ecommerce-microservices-aks
  RESOURCE_GROUP: rg-ecommerce-microservices

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore EcommerceMicroservices.sln
    
    - name: Build
      run: dotnet build EcommerceMicroservices.sln --no-restore --configuration Release
    
    - name: Test
      run: dotnet test EcommerceMicroservices.sln --no-build --configuration Release --verbosity normal
    
    - name: Publish User Service
      run: dotnet publish src/UserService/UserService.API/UserService.API.csproj -c Release -o ./publish/user-service
    
    - name: Upload User Service Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: user-service
        path: ./publish/user-service

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Extract metadata for User Service
      id: meta-user
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/user-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push User Service Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/UserService/UserService.API/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-user.outputs.tags }}
        labels: ${{ steps.meta-user.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-to-azure:
    needs: [build-and-test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        dns-name-label: ecommerce-user-service-${{ github.run_id }}
        image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/user-service:latest
        registry-login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: user-service-${{ github.run_id }}
        ports: 8080
        environment-variables: ASPNETCORE_ENVIRONMENT=Production
        secure-environment-variables: |
          ConnectionStrings__ServiceBus=${{ secrets.SERVICE_BUS_CONNECTION_STRING }}
          APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.APP_INSIGHTS_CONNECTION_STRING }}
